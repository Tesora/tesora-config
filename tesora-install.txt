WIP, merging in other steps as they pass

This document describes the process I used to create Tesora CI.
This process is complemented by source in https://github.com/Tesora/tesora-config.git which:
- provide tooling to launch nodes in our environment.
- provide customization to the upstream puppet modules, for our environment
- provide settings and secrets appropriate for our environment.

Without further ado:

start puppetmaster server with flavor build.puppet_prod ubuntu 12.04, build key, internal, etc.
(due to issues with the global one, I uploaded a ubuntu12.04-ci image I had just downloaded)

setup puppetmaster.
log into host.  become root and run this stuff:

apt-get update
apt-get upgrade -y
apt-get install -y git
git clone https://github.com/Tesora/tesora-config.git /opt/config/production

PUPPET_VERSION=2.7 /opt/config/production/install_puppet.sh
apt-get install -y puppetmaster-passenger hiera hiera-puppet

/opt/config/production/install_modules.sh
mkdir -p /etc/puppet/hieradata/production

Manually, PROVIDE common.yaml and place it in /etc/puppet/hieradata/production/
(This contains secrets, and is generally outside the scope of this document, but encrypted production data has been placed in the git repo)

run all this stuff as root:

chown -R puppet:puppet /etc/puppet/hieradata/
chmod -R 0711 /etc/puppet/hieradata/
chmod 0600 /etc/puppet/hieradata/production/common.yaml

#become the puppet server:
echo "ci-puppetmaster.openstacklocal" > /etc/hostname
service hostname restart
puppet apply --modulepath='/opt/config/production/modules:/etc/puppet/modules' -e 'include tesora_cyclone::puppetmaster'


# Configure your launch environment (prep for bringing up hosts)

see /opt/config/production/launch/launch.sh
PROVIDE ~ubuntu/ci-launch.sh script.    
(This is a openstack rc file. based on bluebox, but password added inline for convenience) 

the one I used 
Puppetboard:

edit launch.sh
do some of 
export FQDN="puppetdb.elasticdb.org"
puppet cert generate $FQDN
run launch.sh

MySQL:

I booted a m1.small ubuntu12.04-ci, logged in via build.pem and run this all as root:
(named the host ci-mysql, see regex below)

wget https://apt.puppetlabs.com/puppetlabs-release-precise.deb
sudo dpkg -i puppetlabs-release-precise.deb
sudo apt-get update
sudo apt-get install -y puppet
puppet module install puppetlabs-mysql

mkdir -p ~/.puppet/manifests
cat > ~/.puppet/manifests/site.pp <<EOF
node /^ci-mysql.*/ {
  class { '::mysql::server':
    root_password => '<<<<REPLACEME>>>>>',
    override_options => { 'mysqld' => { 'bind_address' => '0.0.0.0' } }
  }
}
EOF

sudo puppet apply --modulepath='/home/ubuntu/.puppet/modules/:/etc/puppet/modules' .puppet/manifests/site.pp

CREATE USER 'gerrit2'@'%' IDENTIFIED BY '<<<<REPLACEME>>>>>';
CREATE DATABASE reviewdb;
GRANT ALL PRIVILEGES ON reviewdb.* TO 'gerrit2'@'%' WITH GRANT OPTION;

mysqladmin flush-hosts



Review:

On the puppetmaster, run launchreview.sh

Attach a security profile with 443/80 and you might see something.
Note:  it's possible you may have to edit _default_ into the apache vhost config. 

We're following instructions here:
https://git.openstack.org/cgit/openstack-infra/system-config/tree/doc/source/gerrit.rst

Skip the mysql CLA bit, it doesn't work currently.
ERROR 1146 (42S02): Table 'reviewdb.contributor_agreements' doesn't exist

Create all the groups they specify.

Create the openstack-project-creator generally as specified.
I had to find my project pub key in hiera.
And, had to provde -i mykey.pem on the cli - no password.


add hostkey github.com as specified.



add accounts in the UI:

`Project Bootstrappers` grants all the permissions needed to set up a new project.

`Third-Party CI` group is used to grant +/-1 Verified access to external testing tools on a sandbox project.

`Voting Third-Party CI` group is used to grant +/-1 Verified access to external testing tools for all projects.

`Continuous Integration Tools` group contains Jenkins and any other CI tools that get +2/-2 access on reviews.

`Release Managers` group is used for release managers.

`openstack-stable-maint` group is used for people maintaining stable
branches - often distinct from the folk maintaining projects.




find groups:
bhunter@review:~/temp/All-Projects-ACLs$ grep group project.config | sed 's/.*group //g'|sort|uniq







create and attach data volume to gerrit, 
   create 100GB volume. Attach to instance
   ssh into review.
   sudo mkdir /home/gerrit2
   sudo run the guts of mount_volume.sh, but /dev/sdb and /home/gerrit2
   I touch /home/gerrit/testfile, rebooted just to make sure it stuck

